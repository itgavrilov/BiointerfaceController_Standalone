plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.jlink' version '2.24.1'
}

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

java {
    sourceCompatibility = JavaVersion.VERSION_16
    targetCompatibility = JavaVersion.VERSION_16
    group = 'ru.gsa.biointerface'
    mainClassName = 'ru.gsa.biointerface.Main'
    version = '1.0-SNAPSHOT'
    modularity.inferModulePath.set(true)
}

javafx {
    version = sourceCompatibility
    modules = ['javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics']
}

jlink {
    addExtraDependencies("javafx")
    launcher {
        name = 'biointerfaceController(standalone)'
        mainClass = mainClassName
    }
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Build-Revision': version,
                //'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                'Created-By': "itgavrilov@gmail.com"
        )
    }
}

repositories {
    mavenLocal()
    mavenCentral()
}

tasks.getByName('compileJava') {
    //options.compilerArgs << "-Xlint:unchecked"
}

application {
    mainModule = group.toString()
    mainClass = mainClassName
}


tasks.getByName('jar') {
    manifest {
        attributes(
                'Main-Class': mainClassName,
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Build-Revision': version,
                'Created-By': "itgavrilov@gmail.com"
        )
    }
}

def junitVersion = '5.8.1'
def slf4jVersion = '1.7.32'
def log4jVersion = '2.14.1'
def hibernateVersion = '5.6.1.Final'
def lombokVersion = '1.18.22'

dependencies {
    // сахар дря разработки.
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    annotationProcessor("org.projectlombok:lombok:$lombokVersion")
//-----------SerialPort----------------------
    implementation("com.fazecast:jSerialComm:2.7.0")

//-----------Logging------------
    implementation("org.slf4j:slf4j-api:${slf4jVersion}")
    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-slf4j18-impl:${log4jVersion}")

//-----------Database----------------------
    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    implementation("com.github.gwenn:sqlite-dialect:0.1.2")
    implementation("org.xerial:sqlite-jdbc:3.36.0.3")

// Annotation processor for metamodel for criteria api
    //annotationProcessor("javax.xml.bind:jaxb-api")
    //annotationProcessor("org.hibernate:hibernate-jpamodelgen:${hibernateVersion}")
//-----------Validator----------------------
    implementation('org.hibernate:hibernate-validator:7.0.1.Final')
    implementation("javax.validation:validation-api:2.0.1.Final")

//-----------Validator for javafx------------
    //implementation 'org.openjfx:javafx:16' // https://mvnrepository.com/artifact/org.openjfx/javafx
    compileClasspath('net.synedra:validatorfx:0.1.14') {
        exclude(group: 'org.openjfx')
    }

//-----------Tests----------------------
    testImplementation("org.hibernate:hibernate-core:${hibernateVersion}")
    testImplementation("com.h2database:h2:1.4.200")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    testCompileOnly("org.projectlombok:lombok:$lombokVersion")
    testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
}

test {
    useJUnitPlatform()
}